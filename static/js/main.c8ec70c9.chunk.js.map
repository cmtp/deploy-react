{"version":3,"sources":["shared/components/layout/Header.js","shared/components/layout/Content.js","shared/components/layout/Footer.js","components/App.js","shared/redux/baseActions.js","api/api.js","shared/utils/constants.js","services/PostService.js","actions/postActions.js","actions/actionTypes.js","components/Home/HomeListItem.js","shared/utils/frontend.js","components/Home/HomeList.js","components/Home/Home.js","components/Home/index.js","components/Pomodoro/Timer.js","components/Todo/List.js","components/Todo/Todo.js","components/About/About.js","shared/helpers/addFormControl.js","components/Contact/Contact.js","components/Login/Login.js","components/Error/404.js","components/Post/Post.js","components/Post/index.js","components/Create/CreateForm.js","components/Create/Create.js","components/Create/index.js","components/Hooks/Seconds.js","components/Hooks/App.js","components/Users/UserItem.js","services/UserService.js","components/Users/Users.js","shared/hooks/useFetch.js","components/Users/UserCreate.js","routes.js","reducers/postReducer.js","reducers/formsReducer.js","shared/reducers/index.js","serviceWorker.js","index.js","shared/redux/configureStore.js"],"names":["Header","props","useState","isOpen","setIsOpen","className","Navbar","dark","color","expand","NavbarBrand","href","title","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","to","Content","children","Footer","Date","getFullYear","App","columns","this","Component","request","type","received","payload","error","api","axios","create","baseURL","process","withCredentials","headers","Accept","getPosts","a","limit","page","API","get","response","Error","getPost","id","addPost","post","updatePost","put","deletePost","delete","fetchPosts","dispatch","PostService","data","console","log","fetchPost","resetPostForm","actions","reset","HomeListItem","Card","CardImg","top","width","src","alt","CardBody","CardTitle","CardSubtitle","CardText","description","getNewState","state","newState","HomeList","items","posts","length","Object","keys","map","key","Home","connect","bindActionCreators","Timer","setDefaultTime","setState","time","times","defaultTime","setTimeForWork","alert","message","setTime","setTimeForShortBreak","shortBreak","setTimeForLongBreak","longBreak","newTime","restartInterval","clearInterval","interval","setInterval","countDown","prevState","displayTimer","seconds","m","Math","floor","s","List","item","completed","task","markAsCompleted","removeTask","Todo","handleOnSubmit","e","preventDefault","uuidv4","find","filteredTasks","filter","handleOnChange","bind","value","target","onSubmit","onChange","About","addFormControl","WrappedComponent","FormGroup","Label","for","label","LabeledFirstName","Input","placeholder","LabeledLastName","Contact","Form","Button","Login","Error404","Post","match","params","selectedPost","required","val","CreateForm","values","handleAddNewPost","history","push","user","comments","formDispatch","model","getDispatch","attachDispatch","text","name","validators","show","messages","textarea","withRouter","Create","Seconds","setSeconds","useEffect","intervalId","AppHooks","showTimer","setShowTimer","UserItem","email","getUsers","addUser","Users","method","service","body","setData","loading","setLoading","UserService","fetchUrl","dataItems","useFetch","userList","UserCreate","useHistory","password","setUser","event","AppRoutes","path","component","exact","initialState","seletedPost","initialForm","rootReducer","combineReducers","action","newPosts","filteredPosts","updatedPost","index","findIndex","splice","createForms","postForm","Boolean","window","location","hostname","rootElement","document","getElementById","store","middleware","thunk","createStore","composeWithDevTools","applyMiddleware","configureStore","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c8ec70c9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// eslint-disable-next-line\r\nimport { Navbar, NavbarBrand, Nav, NavItem, NavbarToggler, Collapse } from 'reactstrap';\r\n\r\nconst Header = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <header className=\"App-header\">\r\n      <Navbar dark color=\"dark\" expand=\"md\">\r\n        <NavbarBrand href=\"/\">{props.title}</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <Link className=\"nav-link\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </NavItem>\r\n            <NavItem>\r\n              <Link className=\"nav-link\" to=\"/todo\">\r\n                Todo\r\n              </Link>\r\n            </NavItem>\r\n            <NavItem>\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                About\r\n              </Link>\r\n            </NavItem>\r\n            <NavItem>\r\n              <Link className=\"nav-link\" to=\"/contact\">\r\n                Contact\r\n              </Link>\r\n            </NavItem>\r\n            <NavItem>\r\n              <Link className=\"nav-link\" to=\"/posts\">\r\n                New Post\r\n              </Link>\r\n            </NavItem>\r\n          </Nav>\r\n          <Nav navbar>\r\n            <NavItem>\r\n              <Link className=\"nav-link\" to=\"/login\">\r\n                Login\r\n              </Link>\r\n            </NavItem>\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </header>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Content = (props) => {\r\n  const { children } = props;\r\n  return <main>{children}</main>;\r\n};\r\n\r\nContent.propTypes = {\r\n  children: PropTypes.element.isRequired,\r\n};\r\n\r\nexport default Content;\r\n","import React from 'react';\r\n\r\nconst Footer = () => (<footer>&copy; Chris {new Date().getFullYear()} </footer>);\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Header from '../shared/components/layout/Header';\nimport Content from '../shared/components/layout/Content';\nimport Footer from '../shared/components/layout/Footer';\n\n// import Home from './Home/Home';\n// import Todo from './Todo/Todo';\n// import Numbers from './Numbers/Numbers';\n// import Chart from './Chart/Chart';\n// import Timer from './Pomodoro/Timer';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    // this.state = {\n    //   chartType: 'bar',\n    // };\n\n    this.columns = [\n      ['BTC', 3000, 6000, 10000, 15000, 13000, 11000],\n      ['ETH', 2000, 3000, 50000, 4000, 3000, 940],\n      ['XRP', 100, 200, 300, 500, 400, 300],\n    ];\n  }\n\n  // setBarChart = () => {\n  //   this.setState({\n  //     chartType: 'bar'\n  //   });\n  // }\n\n  // setAreaChart = () => {\n  //   this.setState({\n  //     chartType: 'area'\n  //   });\n  // }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header title=\"Bienvenidos a React\" />\n        <Content>\n          {this.props.children}\n          {/* <Home /> */}\n          {/* <Todo /> */}\n          {/* <Numbers /> */}\n          {/* <div>\n            <Chart columns={this.columns} chartType={this.state.chartType} />\n            <p>\n              Chart Type\n              <button type=\"button\" onClick={this.setBarChart}>Bar Chart</button>\n              <button type=\"button\" onClick={this.setAreaChart}>Area Chart</button>\n            </p>\n          </div> */}\n          {/* <Timer /> */}\n        </Content>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  children: PropTypes.element\n};\n\nexport default App;\n","export const request = (type) => ({\r\n  type,\r\n});\r\n\r\nexport const received = (type, payload) => ({\r\n  type,\r\n  payload,\r\n});\r\n\r\nexport const error = (type) => ({\r\n  type,\r\n});\r\n","import axios from 'axios';\r\nimport { URL } from '../shared/utils/constants';\r\n\r\nconst api = axios.create({\r\n  baseURL: `${URL}`,\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nexport default api;\r\n","export const URL = process.env.REACT_APP_URL || 'http://localhost';\r\nexport const PORT = process.env.REACT_APP_PORT || 3001;\r\n","import API from '../api/api';\r\n\r\nconst URL_POSTS = '/posts';\r\n\r\nconst getPosts = async (limit = 10, page = 0) => {\r\n  const response = await API.get(`${URL_POSTS}?_limit=${limit}&_page=${page}`);\r\n  if (response.error) {\r\n    throw new Error('an error occurred');\r\n  }\r\n  return response;\r\n};\r\n\r\nconst getPost = async (id) => {\r\n  const response = await API.get(`${URL_POSTS}/${id}`);\r\n  if (response.error) {\r\n    throw new Error('an error occurred');\r\n  }\r\n  return response;\r\n};\r\n\r\nconst addPost = async (post) => {\r\n  const response = await API.post(`${URL_POSTS}`, post);\r\n  if (response.error) {\r\n    throw new Error('an error occurred');\r\n  }\r\n  return response;\r\n};\r\n\r\nconst updatePost = async (post) => {\r\n  const response = await API.put(`${URL_POSTS}/${post.id}`, post);\r\n  if (response.error) {\r\n    throw new Error('an error occurred');\r\n  }\r\n  return response;\r\n};\r\n\r\nconst deletePost = async (id) => {\r\n  const response = await API.delete(`${URL_POSTS}/${id}`);\r\n  if (response.error) {\r\n    throw new Error('an error occurred');\r\n  }\r\n  return response;\r\n};\r\n\r\nexport default {\r\n  getPosts,\r\n  getPost,\r\n  addPost,\r\n  updatePost,\r\n  deletePost,\r\n};\r\n","import { actions } from 'react-redux-form';\r\nimport { request, received, error } from '../shared/redux/baseActions';\r\n\r\nimport PostService from '../services/PostService';\r\nimport {\r\n  FETCH_POSTS_REQUEST,\r\n  FETCH_POSTS_SUCCESS,\r\n  FETCH_POSTS_ERROR,\r\n  FETCH_POST_REQUEST,\r\n  FETCH_POST_SUCCESS,\r\n  FETCH_POST_ERROR,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_ERROR,\r\n  UPDATE_POST_REQUEST,\r\n  UPDATE_POST_SUCCESS,\r\n  UPDATE_POST_ERROR,\r\n  DELETE_POST_REQUEST,\r\n  DELETE_POST_SUCCESS,\r\n  DELETE_POST_ERROR,\r\n} from './actionTypes';\r\n\r\nexport const fetchPosts = (limit, page) => async (dispatch) => {\r\n  dispatch(request(FETCH_POSTS_REQUEST));\r\n  try {\r\n    const response = await PostService.getPosts(limit, page);\r\n    dispatch(received(FETCH_POSTS_SUCCESS, response.data));\r\n  } catch (err) {\r\n    dispatch(error(FETCH_POSTS_ERROR));\r\n    // eslint-disable-next-line\r\n    console.log('AXIOS_ERROR', err.response);\r\n  }\r\n};\r\n\r\nexport const fetchPost = (id) => async (dispatch) => {\r\n  dispatch(request(FETCH_POST_REQUEST));\r\n  try {\r\n    const response = await PostService.getPost(id);\r\n    dispatch(received(FETCH_POST_SUCCESS, response.data));\r\n  } catch (err) {\r\n    dispatch(error(FETCH_POST_ERROR));\r\n    // eslint-disable-next-line\r\n    console.log('AXIOS_ERROR', err.response);\r\n  }\r\n};\r\n\r\nexport const addPost = (post) => async (dispatch) => {\r\n  dispatch(request(ADD_POST_REQUEST));\r\n  try {\r\n    const response = await PostService.addPost(post);\r\n    dispatch(received(ADD_POST_SUCCESS, response.data));\r\n  } catch (err) {\r\n    dispatch(error(ADD_POST_ERROR));\r\n    // eslint-disable-next-line\r\n    console.log('AXIOS_ERROR', err.response);\r\n  }\r\n};\r\n\r\nexport const updatePost = (post) => async (dispatch) => {\r\n  dispatch(request(UPDATE_POST_REQUEST));\r\n  try {\r\n    const response = await PostService.updatePost(post);\r\n    dispatch(received(UPDATE_POST_SUCCESS, response.data));\r\n  } catch (err) {\r\n    dispatch(error(UPDATE_POST_ERROR));\r\n    // eslint-disable-next-line\r\n    console.log('AXIOS_ERROR:', err.response);\r\n  }\r\n};\r\n\r\nexport const deletePost = (id) => async (dispatch) => {\r\n  dispatch(request(DELETE_POST_REQUEST));\r\n  try {\r\n    const response = await PostService.deletePost(id);\r\n    dispatch(received(DELETE_POST_SUCCESS, response.data));\r\n  } catch (err) {\r\n    dispatch(error(DELETE_POST_ERROR));\r\n    // eslint-disable-next-line\r\n    console.log('AXIOS_ERROR:', err.response);\r\n  }\r\n};\r\n\r\nexport const resetPostForm = () => (dispatch) => {\r\n  dispatch(actions.reset('postForm'));\r\n};\r\n","export const FETCH_POSTS_REQUEST = 'FETCH_POSTS_REQUEST';\r\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS';\r\nexport const FETCH_POSTS_ERROR = 'FETCH_POSTS_ERROR';\r\n\r\nexport const FETCH_POST_REQUEST = 'FETCH_POST_REQUEST';\r\nexport const FETCH_POST_SUCCESS = 'FETCH_POST_SUCCESS';\r\nexport const FETCH_POST_ERROR = 'FETCH_POST_ERROR';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_ERROR = 'ADD_POST_ERROR';\r\n\r\nexport const DELETE_POST_REQUEST = 'DELETE_POST_REQUEST';\r\nexport const DELETE_POST_SUCCESS = 'DELETE_POST_SUCCESS';\r\nexport const DELETE_POST_ERROR = 'DELETE_POST_ERROR';\r\n\r\nexport const UPDATE_POST_REQUEST = 'UPDATE_POST_REQUEST';\r\nexport const UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS';\r\nexport const UPDATE_POST_ERROR = 'UPDATE_POST_ERROR';\r\n","import React from 'react';\r\nimport { object } from 'prop-types';\r\n\r\nimport './HomeListItem.css';\r\nimport {\r\n  Card,\r\n  CardImg,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  CardText,\r\n  CardBody\r\n} from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst HomeListItem = ({ post }) => (\r\n  <div className=\"HomeListItem\">\r\n    <Card>\r\n      <CardImg top width=\"100%\" src=\"https://picsum.photos/200/150\" alt=\"Card image cap\" />\r\n      <CardBody>\r\n        <CardTitle>{post.title}</CardTitle>\r\n        <CardSubtitle>Juan Perez</CardSubtitle>\r\n        <CardText className=\"description\">{post.description}</CardText>\r\n        <Link className=\"btn btn-primary\" to={`/post/${post.id}`}>\r\n          Go to Article\r\n        </Link>\r\n      </CardBody>\r\n    </Card>\r\n  </div>\r\n);\r\n\r\nHomeListItem.propTypes = {\r\n  post: object,\r\n};\r\n\r\nexport default HomeListItem;\r\n","export function getNewState(state, newState) {\r\n  return { ...state, ...newState };\r\n}\r\n\r\nexport function isFirstRender(items) {\r\n  return !items || items.length === 0 || Object.keys(items).length === 0;\r\n}\r\n","import React from 'react';\r\nimport { array } from 'prop-types';\r\nimport HomeListItem from './HomeListItem';\r\nimport { isFirstRender } from '../../shared/utils/frontend';\r\n\r\nimport './HomeList.css';\r\n\r\nconst HomeList = ({ posts }) => (\r\n  <>\r\n    {isFirstRender(posts) ? (\r\n      <div>There is no Posts.</div>\r\n    ) : (\r\n      <div className=\"HomeList\">\r\n        {posts.map((post) => (\r\n          <HomeListItem post={post} key={post.id} />\r\n        ))}\r\n      </div>\r\n    )}\r\n  </>\r\n);\r\n\r\nHomeList.propTypes = {\r\n  posts: array,\r\n};\r\n\r\nexport default HomeList;\r\n","import React, { Component } from 'react';\r\nimport { array, func } from 'prop-types';\r\n\r\nimport HomeList from './HomeList';\r\n\r\nimport './Home.css';\r\n\r\nclass Home extends Component {\r\n  componentDidMount() {\r\n    const { fetchPosts } = this.props;\r\n    fetchPosts();\r\n  }\r\n\r\n  render() {\r\n    const { posts } = this.props;\r\n    // const posts = this.props.posts;\r\n    return (\r\n      <div className=\"Home\">\r\n        <h1>Posts Recientes</h1>\r\n        <HomeList posts={posts} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nHome.propTypes = {\r\n  posts: array,\r\n  fetchPosts: func,\r\n};\r\n\r\nexport default Home;\r\n","import { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { fetchPosts } from '../../actions/postActions';\r\nimport Home from './Home';\r\n\r\nconst mapStateToProps = ({ post }) => ({ posts: post.posts });\r\n\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      fetchPosts,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import React, { Component } from 'react';\r\n\r\nimport './Timer.css';\r\n\r\nclass Timer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      alert: {\r\n        type: '',\r\n        message: '',\r\n      },\r\n      time: 0,\r\n    };\r\n\r\n    this.times = {\r\n      defaultTime: 1500, // 25 min\r\n      shortBreak: 300, // 5 min\r\n      longBreak: 900, // 15 min\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setDefaultTime();\r\n  }\r\n\r\n  setDefaultTime = () => {\r\n    this.setState({\r\n      time: this.times.defaultTime,\r\n    });\r\n  };\r\n\r\n  setTimeForWork = () => {\r\n    this.setState({\r\n      alert: {\r\n        type: 'work',\r\n        message: 'Working!',\r\n      },\r\n    });\r\n\r\n    return this.setTime(this.times.defaultTime);\r\n  };\r\n\r\n  setTimeForShortBreak = () => {\r\n    this.setState({\r\n      alert: {\r\n        type: 'shortBreak',\r\n        message: 'Taking a short Break!',\r\n      },\r\n    });\r\n\r\n    return this.setTime(this.times.shortBreak);\r\n  };\r\n\r\n  setTimeForLongBreak = () => {\r\n    this.setState({\r\n      alert: {\r\n        type: 'longBreak',\r\n        message: 'Taking a Long Break!',\r\n      },\r\n    });\r\n\r\n    return this.setTime(this.times.longBreak);\r\n  };\r\n\r\n  setTime = (newTime) => {\r\n    this.restartInterval();\r\n\r\n    this.setState({\r\n      time: newTime,\r\n    });\r\n  };\r\n\r\n  restartInterval = () => {\r\n    clearInterval(this.interval);\r\n\r\n    this.interval = setInterval(this.countDown, 1000);\r\n  };\r\n\r\n  countDown = () => {\r\n    if (this.state.time === 0) {\r\n      this.setState({\r\n        alert: {\r\n          type: 'buz',\r\n          message: 'Buzzzzzzz!',\r\n        },\r\n      });\r\n    } else {\r\n      this.setState((prevState) => ({\r\n        time: prevState.time - 1,\r\n      }));\r\n    }\r\n  };\r\n\r\n  displayTimer = (seconds) => {\r\n    const m = Math.floor((seconds % 3600) / 60);\r\n    const s = Math.floor((seconds % 3600) % 60);\r\n\r\n    return `${m < 10 ? '0' : ''}${m}:${s < 10 ? '0' : ''}${s}`;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      alert: { message, type },\r\n      time,\r\n    } = this.state;\r\n    return (\r\n      <div className=\"Pomodoro\">\r\n        <div className={`alert ${type}`}>{message}</div>\r\n        <div className=\"timer\">{this.displayTimer(time)}</div>\r\n        <div className=\"types\">\r\n          <button type=\"button\" className=\"start\" onClick={this.setTimeForWork}>\r\n            Start Working\r\n          </button>\r\n          <button type=\"button\" className=\"short\" onClick={this.setTimeForShortBreak}>\r\n            Short Break\r\n          </button>\r\n          <button type=\"button\" className=\"long\" onClick={this.setTimeForLongBreak}>\r\n            Long Break\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst List = (props) => (\r\n  <div className=\"List\">\r\n    <h2>Lista de tareas</h2>\r\n    <ul>\r\n      {props.items.map((item, key) => (\r\n        <li key={key} className={`${item.completed ? 'completed' : 'pending'}`}>\r\n          <span>{item.task}</span>\r\n          <div className=\"actions\">\r\n            <button\r\n              type=\"button\"\r\n              className={item.completed ? 'hide' : 'done'}\r\n              onClick={() => props.markAsCompleted(item.id)}\r\n            >\r\n              Completar\r\n            </button>\r\n            <button type=\"button\" className=\"trash\" onClick={() => props.removeTask(item.id)}>\r\n              Remover\r\n            </button>\r\n          </div>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nList.propTypes = {\r\n  items: PropTypes.array,\r\n  markAsCompleted: PropTypes.func,\r\n  removeTask: PropTypes.func,\r\n};\r\n\r\nexport default List;\r\n","import React, { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport List from './List';\r\n\r\nimport './Todo.css';\r\n\r\nclass Todo extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      task: '',\r\n      items: [],\r\n    };\r\n\r\n    this.handleOnChange = this.handleOnChange.bind(this);\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  componentDidMount() {\r\n    this.setState({\r\n      items: [\r\n        {\r\n          id: uuidv4(),\r\n          task: 'Pagar la renta',\r\n          completed: false,\r\n        },\r\n        {\r\n          id: uuidv4(),\r\n          task: 'Ir de Compras',\r\n          completed: false,\r\n        },\r\n        {\r\n          id: uuidv4(),\r\n          task: 'Reunion a las 7',\r\n          completed: false,\r\n        },\r\n      ],\r\n    });\r\n  }\r\n\r\n  handleOnSubmit = (e) => {\r\n    e.preventDefault();\r\n    // anadir task a el estado (items)\r\n    this.setState((prevState) => ({\r\n      task: '',\r\n      items: [\r\n        ...prevState.items,\r\n        {\r\n          id: uuidv4(),\r\n          task: prevState.task,\r\n          completed: false,\r\n        },\r\n      ],\r\n    }));\r\n    // actualizar la vista con la tarea\r\n  };\r\n\r\n  markAsCompleted = (id) => {\r\n    const foundTask = this.state.items.find((task) => task.id === id);\r\n    foundTask.completed = true;\r\n    this.setState((prevState) => ({\r\n      items: [...prevState.items],\r\n    }));\r\n  };\r\n\r\n  removeTask = (id) => {\r\n    // eslint-disable-next-line react/no-access-state-in-setstate\r\n    const filteredTasks = this.state.items.filter((task) => task.id !== id);\r\n\r\n    this.setState({\r\n      items: filteredTasks,\r\n    });\r\n  };\r\n\r\n  handleOnChange(e) {\r\n    // const value = e.target.value;\r\n    const {\r\n      target: { value },\r\n    } = e;\r\n    this.setState({\r\n      task: value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Todo\">\r\n        <h1>New Task</h1>\r\n        <form onSubmit={this.handleOnSubmit}>\r\n          <input type=\"text\" value={this.state.task} onChange={this.handleOnChange} />\r\n        </form>\r\n        {/* lista */}\r\n        <List items={this.state.items} markAsCompleted={this.markAsCompleted} removeTask={this.removeTask} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React from 'react';\r\n\r\nconst About = () => <h1>About</h1>;\r\n\r\nexport default About;\r\n","/* eslint-disable */\r\nimport React, { Component } from 'react';\r\nimport { FormGroup, Label } from 'reactstrap';\r\n\r\nconst addFormControl = (WrappedComponent) => {\r\n  return class extends Component {\r\n    render() {\r\n      return (\r\n        <FormGroup>\r\n          <Label for={this.props.id}>{this.props.label}</Label>\r\n          <WrappedComponent {...this.props} />\r\n        </FormGroup>\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nexport default addFormControl;\r\n","import React from 'react';\r\nimport { Form, Input, Button } from 'reactstrap';\r\nimport addFormControl from '../../shared/helpers/addFormControl';\r\n\r\nconst FirstNameInput = () => <Input placeholder=\"First Name\" id=\"firstname\" />;\r\nconst LastNameInput = () => <Input placeholder=\"Last Name\" id=\"lastname\" />;\r\n\r\nconst LabeledFirstName = addFormControl(FirstNameInput);\r\nconst LabeledLastName = addFormControl(LastNameInput);\r\n\r\nconst Contact = () => (\r\n  <>\r\n    <h1>Contact</h1>\r\n    <Form>\r\n      <LabeledFirstName label=\"First Name\" id=\"firstname\" />\r\n      <LabeledLastName label=\"Last name\" id=\"lastname\" />\r\n      <Button>Submit</Button>\r\n    </Form>\r\n  </>\r\n);\r\n\r\nexport default Contact;\r\n","import React from 'react';\r\n\r\nconst Login = () => <h1>Login</h1>;\r\n\r\nexport default Login;\r\n","import React from 'react';\r\n\r\nconst Error404 = () => (\r\n  <div>\r\n    <h1>Error 404 - Content Not Found</h1>\r\n  </div>\r\n);\r\n\r\nexport default Error404;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Post.css';\r\n\r\nclass Post extends Component {\r\n  componentDidMount() {\r\n    const {\r\n      match: {\r\n        params: { id },\r\n      },\r\n      fetchPost,\r\n    } = this.props;\r\n    if (id) {\r\n      fetchPost(id);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { post } = this.props;\r\n\r\n    return post ? (\r\n      <div className=\"Post\">\r\n        <h1>Post {post.title}</h1>\r\n        <img src=\"https://picsum.photos/1024/500\" alt=\"banner\" />\r\n        <p>{post.description}</p>\r\n      </div>\r\n    ) : (\r\n      <div><h1>There is no post for this id.</h1></div>\r\n    );\r\n  }\r\n}\r\n\r\nPost.propTypes = {\r\n  match: PropTypes.object,\r\n  fetchPost: PropTypes.func,\r\n  post: PropTypes.object,\r\n};\r\n\r\nexport default Post;\r\n","import { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport {\r\n  addPost,\r\n  updatePost,\r\n  deletePost,\r\n  fetchPost\r\n} from '../../actions/postActions';\r\n\r\nimport Post from './Post';\r\n\r\nconst mapStateToProps = ({ post }) => ({ post: post.selectedPost });\r\n\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      fetchPost,\r\n      addPost,\r\n      updatePost,\r\n      deletePost,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);\r\n","import React, { Component } from 'react';\r\nimport { func, object } from 'prop-types';\r\nimport { Form, Control, Errors } from 'react-redux-form';\r\nimport { FormGroup, Label, Button } from 'reactstrap';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst required = (val) => val && val.length;\r\n\r\nclass CreateForm extends Component {\r\n  handleOnSubmit = (values) => {\r\n    this.handleAddNewPost(values);\r\n    this.props.history.push('/');\r\n  };\r\n\r\n  handleAddNewPost = (values) => {\r\n    const { addPost, resetPostForm } = this.props;\r\n    if (values.title) {\r\n      addPost({\r\n        title: values.title,\r\n        description: values.description,\r\n        user: values.user,\r\n        comments: [],\r\n      });\r\n    }\r\n    resetPostForm();\r\n  };\r\n\r\n  attachDispatch(dispatch) {\r\n    this.formDispatch = dispatch;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form\r\n          className=\"CreateForm\"\r\n          model=\"postForm\"\r\n          onSubmit={(values) => this.handleOnSubmit(values)}\r\n          getDispatch={(dispatch) => this.attachDispatch(dispatch)}\r\n        >\r\n          <FormGroup>\r\n            <Label for=\"title\">Title</Label>\r\n            <Control.text\r\n              model=\".title\"\r\n              name=\"title\"\r\n              id=\"title\"\r\n              placeholder=\"Post Title\"\r\n              className=\"form-control\"\r\n              validators={{ required }}\r\n            />\r\n            <Errors className=\"error\" model=\".title\" show=\"touched\" messages={{ required: 'Required' }} />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"description\">Description</Label>\r\n            <Control.textarea\r\n              id=\"description\"\r\n              name=\"description\"\r\n              className=\"form-control\"\r\n              placeholder=\"Post Content\"\r\n              model=\".description\"\r\n              validators={{ required }}\r\n            />\r\n            <Errors\r\n              className=\"error\"\r\n              model=\".description\"\r\n              show=\"touched\"\r\n              messages={{ required: 'Este elemento es requerido*' }}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"user\">User</Label>\r\n            <Control.text\r\n              model=\".user\"\r\n              id=\"user\"\r\n              name=\"user\"\r\n              className=\"form-control\"\r\n              placeholder=\"Post User\"\r\n              validators={{ required }}\r\n            />\r\n            <Errors\r\n              className=\"error\"\r\n              model=\".user\"\r\n              show=\"touched\"\r\n              messages={{ required: 'Este elemento es requerido*' }}\r\n            />\r\n          </FormGroup>\r\n          <Button type=\"submit\">Submit</Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCreateForm.propTypes = {\r\n  addPost: func,\r\n  resetPostForm: func,\r\n  history: object\r\n};\r\n\r\nexport default withRouter(CreateForm);\r\n","import React from 'react';\r\nimport { func } from 'prop-types';\r\n\r\nimport CreateForm from './CreateForm';\r\n\r\nconst Create = (props) => {\r\n  const { addPost, resetPostForm } = props;\r\n  return (\r\n    <div className=\"Create\">\r\n      <h1>Create Post</h1>\r\n      <CreateForm addPost={addPost} resetPostForm={resetPostForm} />\r\n    </div>\r\n  );\r\n};\r\n\r\nCreate.propTypes = {\r\n  addPost: func,\r\n  resetPostForm: func,\r\n};\r\n\r\nexport default Create;\r\n","import { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { addPost, resetPostForm } from '../../actions/postActions';\r\nimport Create from './Create';\r\n\r\nconst mapStateToProps = ({ post }) => ({ post: post.selectedPost });\r\n\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      addPost,\r\n      resetPostForm\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Create);\r\n","import { useState, useEffect } from 'react';\r\n\r\nconst Seconds = () => {\r\n  const [seconds, setSeconds] = useState(0);\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setSeconds(seconds + 1);\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [seconds]);\r\n\r\n  return seconds;\r\n};\r\n\r\nexport default Seconds;\r\n","import React, { useState } from 'react';\r\nimport Seconds from './Seconds';\r\n\r\nconst AppHooks = () => {\r\n  const [showTimer, setShowTimer] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <h1>Contador</h1>\r\n      <button type=\"button\" onClick={() => setShowTimer(!showTimer)}>\r\n        {!showTimer ? 'Start Timer' : 'Stop Timer'}\r\n      </button>\r\n      {!showTimer ? <div className=\"alert alert-danger\">Off</div> : <div className=\"alert alert-success\">Started! <Seconds /></div>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppHooks;\r\n","import React from 'react';\r\nimport { object } from 'prop-types';\r\nimport {\r\n  Card,\r\n  CardImg,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle\r\n} from 'reactstrap';\r\n\r\nimport './UserItem.css';\r\n\r\nconst UserItem = ({ user }) => (\r\n  <div className=\"UserItem col-lg-4 col-md-6 col-xs-12\">\r\n    <Card>\r\n      <CardImg top width=\"100%\" src=\"https://picsum.photos/200/150\" alt=\"Card image cap\" />\r\n      <CardBody>\r\n        <CardTitle>{user.name}</CardTitle>\r\n        <CardSubtitle>{user.email}</CardSubtitle>\r\n      </CardBody>\r\n    </Card>\r\n  </div>\r\n);\r\n\r\nUserItem.propTypes = {\r\n  user: object,\r\n};\r\n\r\nexport default UserItem;\r\n","import API from '../api/api';\r\n\r\nconst URL_USERS = '/users';\r\n\r\nconst getUsers = async (limit = 10, page = 0) => {\r\n  const response = await API.get(`${URL_USERS}?_limit=${limit}&_page=${page}`);\r\n  if (response.error) {\r\n    throw new Error('an error occurred');\r\n  }\r\n  return response;\r\n};\r\n\r\nconst addUser = async (user) => {\r\n  const response = await API.post(`${URL_USERS}`, user);\r\n  if (response.error) {\r\n    throw new Error('Occurred while is creating');\r\n  }\r\n  return response;\r\n};\r\n\r\nexport default {\r\n  getUsers,\r\n  addUser,\r\n};\r\n","import React from 'react';\r\nimport UserItem from './UserItem';\r\nimport useFetch from '../../shared/hooks/useFetch';\r\n\r\nconst Users = () => {\r\n  const [userList, loading] = useFetch('User', 'GET');\r\n\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <div>Loading.</div>\r\n      ) : (\r\n        <div className=\"container row\">\r\n          {userList.map((item) => (\r\n            <UserItem key={item.id} user={item} />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import { useState, useEffect } from 'react';\r\nimport UserService from '../../services/UserService';\r\nimport PostService from '../../services/PostService';\r\n\r\n// GET, POST, PUT, DELETE\r\nexport default function useFetch(api, method, body = null) {\r\n  const [data, setData] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  let service;\r\n\r\n  if (api === 'User') {\r\n    service = UserService;\r\n  }\r\n  if (api === 'Post') {\r\n    service = PostService;\r\n  }\r\n\r\n  const fetchUrl = async () => {\r\n    let dataItems;\r\n    if (method === 'GET') dataItems = await service.getUsers();\r\n    if (method === 'POST') dataItems = await service.addUser(body);\r\n    setData(dataItems.data);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchUrl();\r\n  }, []);\r\n  return [data, loading];\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Button\r\n} from 'reactstrap';\r\n\r\nimport UserService from '../../services/UserService';\r\n\r\nconst UserCreate = () => {\r\n  const history = useHistory();\r\n  const [user, setUser] = useState({ name: '', email: '', password: '' });\r\n\r\n  const handleOnChange = (event) => {\r\n    setUser({\r\n      ...user,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleOnSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const response = await UserService.addUser(user);\r\n\r\n    console.log(response);\r\n    history.push('/users');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Create User</h1>\r\n      <Form onSubmit={handleOnSubmit}>\r\n        <FormGroup>\r\n          <Label for=\"name\">Name</Label>\r\n          <Input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Juan Perez\" onChange={handleOnChange} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"email\">Email</Label>\r\n          <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"jperez@sample.com\" onChange={handleOnChange} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"password\">Password</Label>\r\n          <Input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            id=\"password\"\r\n            placeholder=\"Ingrese su password\"\r\n            onChange={handleOnChange}\r\n          />\r\n        </FormGroup>\r\n        <Button>Submit</Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserCreate;\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nimport App from './components/App';\r\nimport Home from './components/Home';\r\nimport Timer from './components/Pomodoro/Timer';\r\nimport Todo from './components/Todo/Todo';\r\nimport About from './components/About/About';\r\nimport Contact from './components/Contact/Contact';\r\nimport Login from './components/Login/Login';\r\nimport Error404 from './components/Error/404';\r\nimport Post from './components/Post';\r\nimport Create from './components/Create';\r\nimport AppHooks from './components/Hooks/App';\r\nimport Users from './components/Users/Users';\r\nimport UserCreate from './components/Users/UserCreate';\r\n\r\nconst AppRoutes = () => (\r\n  <App>\r\n    <Switch>\r\n      <Route path=\"/\" component={Home} exact />\r\n      <Route path=\"/pomodoro\" component={Timer} exact />\r\n      <Route path=\"/todo\" component={Todo} exact />\r\n      <Route path=\"/about\" component={About} exact />\r\n      <Route path=\"/contact\" component={Contact} exact />\r\n      <Route path=\"/login\" component={Login} exact />\r\n      <Route path=\"/posts/:id\" component={Post} exact />\r\n      <Route path=\"/posts\" component={Create} exact />\r\n      <Route path=\"/hooks\" component={AppHooks} exact />\r\n      <Route path=\"/users\" component={Users} exact />\r\n      <Route path=\"/users/create\" component={UserCreate} exact />\r\n      <Error404 component={Error404} />\r\n    </Switch>\r\n  </App>\r\n);\r\n\r\nexport default AppRoutes;\r\n","import {\r\n  FETCH_POSTS_SUCCESS,\r\n  FETCH_POST_SUCCESS,\r\n  ADD_POST_SUCCESS,\r\n  DELETE_POST_SUCCESS,\r\n  UPDATE_POST_SUCCESS,\r\n} from '../actions/actionTypes';\r\nimport { getNewState } from '../shared/utils/frontend';\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  seletedPost: null,\r\n};\r\n\r\nexport default function postReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_POSTS_SUCCESS: {\r\n      const { payload: posts } = action;\r\n      return getNewState(state, {\r\n        posts,\r\n      });\r\n    }\r\n    case FETCH_POST_SUCCESS: {\r\n      const { payload: selectedPost } = action;\r\n      return getNewState(state, {\r\n        selectedPost,\r\n      });\r\n    }\r\n    case ADD_POST_SUCCESS: {\r\n      const { payload: post } = action;\r\n      const newPosts = [...state.posts, post];\r\n      return getNewState(state, {\r\n        posts: newPosts,\r\n        selectedPost: post,\r\n      });\r\n    }\r\n    case DELETE_POST_SUCCESS: {\r\n      const { payload: id } = action;\r\n      const filteredPosts = state.posts.filter((post) => post.id !== id);\r\n      return getNewState(state, {\r\n        posts: filteredPosts,\r\n      });\r\n    }\r\n    case UPDATE_POST_SUCCESS: {\r\n      const { payload: updatedPost } = action;\r\n      const index = state.posts.findIndex((post) => post.id === updatedPost.id);\r\n      const filteredPosts = state.posts.filter((post) => post.id !== updatedPost.id);\r\n      filteredPosts.splice(index, 0, updatedPost);\r\n      return getNewState(state, {\r\n        posts: filteredPosts,\r\n      });\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n","import { createForms } from 'react-redux-form';\r\n\r\nconst initialForm = {\r\n  title: '',\r\n  description: '',\r\n  user: '',\r\n  comments: [],\r\n};\r\n\r\nexport default function formsReducer() {\r\n  return createForms({\r\n    postForm: initialForm,\r\n  });\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport post from '../../reducers/postReducer';\r\nimport formsReducer from '../../reducers/formsReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  post,\r\n  ...formsReducer()\r\n});\r\n\r\nexport default rootReducer;\r\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport AppRoutes from './routes';\nimport configureStore from './shared/redux/configureStore';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nconst rootElement = document.getElementById('root');\nconst store = configureStore(window.initialState);\n\nconst renderApp = (Component) => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <Router>\n          <Component />\n        </Router>\n      </Provider>\n    </React.StrictMode>,\n    rootElement\n  );\n};\n\nrenderApp(AppRoutes);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from '../reducers';\r\n\r\nexport default function configureStore(initialState) {\r\n  const middleware = [thunk];\r\n\r\n  return createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\r\n}\r\n"],"sourceRoot":""}